// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter;

  EventEmitter = require('events').EventEmitter;

  module.exports = function(parent, handle, offsetMin, offsetMax, opts) {
    var currentPosition, currentPositionRelativeToElement, emitter, page;

    if (typeof handle !== 'object') {
      offsetMax = offsetMin;
      offsetMin = handle;
      handle = parent;
    }
    if (opts == null) {
      opts = {};
    }
    handle = $(handle);
    parent = $(parent);
    page = $('body');
    emitter = new EventEmitter();
    currentPosition = function() {
      var pos;

      pos = parent.position().left;
      if (opts.includeParentWidth) {
        pos += parent.width();
      }
      return pos;
    };
    currentPositionRelativeToElement = function(event) {
      return event.pageX - parent.offset().left;
    };
    handle.on('mousedown', function(downEvent) {
      var complete, drag, handleStartX, hasDragged, max, min, percentOfXVal, startTime;

      handleStartX = currentPosition();
      min = typeof offsetMin === 'function' ? offsetMin() : offsetMin;
      max = typeof offsetMax === 'function' ? offsetMax() : offsetMax;
      downEvent.preventDefault();
      percentOfXVal = function(x) {
        return (x - min) / (max - min);
      };
      startTime = Date.now();
      hasDragged = false;
      drag = function(dragEvent) {
        var currentX, offsetX, position, potentialX, relativePosition;

        if (!hasDragged) {
          position = percentOfXVal(currentPosition());
          relativePosition = currentPositionRelativeToElement(dragEvent);
          emitter.emit('dragStart', position, relativePosition);
          hasDragged = true;
        }
        offsetX = dragEvent.pageX - downEvent.pageX;
        currentX = currentPosition();
        potentialX = handleStartX + offsetX;
        if (min > potentialX) {
          if (currentX === min) {
            return;
          }
          potentialX = min;
        } else if (max < potentialX) {
          if (currentX === max) {
            return;
          }
          potentialX = max;
        }
        position = percentOfXVal(potentialX);
        relativePosition = currentPositionRelativeToElement(dragEvent);
        return emitter.emit('drag', position, relativePosition);
      };
      complete = function(event) {
        var position, relativePosition;

        page.off('mousemove', drag);
        page.off('mouseup', complete);
        if (hasDragged) {
          position = percentOfXVal(currentPosition());
          relativePosition = currentPositionRelativeToElement(event);
          return emitter.emit('dragFinish', position, relativePosition);
        } else if (Date.now() - startTime < 500) {
          return emitter.emit('click');
        }
      };
      page.on('mousemove', drag);
      return page.on('mouseup', complete);
    });
    return emitter;
  };

}).call(this);
