// Generated by CoffeeScript 1.12.7
(function() {
  var $, EventEmitter;

  EventEmitter = require('events').EventEmitter;

  $ = window.jQuery || require('jquery');

  module.exports = function(parent, handle, offsetMin, offsetMax, opts) {
    var canTouch, coordinates, currentPosition, currentPositionRelativeToElement, emitter, eventName, isDragging, page;
    if (typeof handle !== 'object') {
      opts = offsetMax;
      offsetMax = offsetMin;
      offsetMin = handle;
      handle = parent;
    }
    if (opts == null) {
      opts = {};
    }
    if (opts.stopPropagation == null) {
      opts.stopPropagation = true;
    }
    if (!opts.shouldDrag || typeof opts.shouldDrag !== 'function') {
      opts.shouldDrag = function() {
        return true;
      };
    }
    if (opts.movementThreshold == null) {
      opts.movementThreshold = 2;
    }
    if (opts.timeThreshold == null) {
      opts.timeThreshold = 100;
    }
    if (opts.requireBothThresholds == null) {
      opts.requireBothThresholds = false;
    }
    canTouch = !!('ontouchstart' in window);
    eventName = function(action) {
      if (canTouch) {
        switch (action) {
          case "start":
            return "touchstart mousedown";
          case "move":
            return "touchmove mousemove";
          case "finish":
            return "touchcancel mouseup touchend";
          default:
            return void 0;
        }
      } else {
        switch (action) {
          case "start":
            return "mousedown";
          case "move":
            return "mousemove";
          case "finish":
            return "mouseup";
          default:
            return void 0;
        }
      }
    };
    coordinates = function(e) {
      var ref, ref1, ref2, ref3;
      if (e.originalEvent instanceof MouseEvent) {
        return {
          x: e.pageX,
          y: e.pageY
        };
      } else if (e.originalEvent instanceof TouchEvent) {
        return {
          x: (ref = e.originalEvent) != null ? (ref1 = ref.touches[0]) != null ? ref1.pageX : void 0 : void 0,
          y: (ref2 = e.originalEvent) != null ? (ref3 = ref2.touches[0]) != null ? ref3.pageY : void 0 : void 0
        };
      } else {
        return void 0;
      }
    };
    handle = $(handle);
    parent = $(parent);
    page = $('body');
    emitter = new EventEmitter();
    isDragging = false;
    currentPosition = function() {
      var pos;
      pos = parent.position().left;
      if (opts.includeParentWidth) {
        pos += parent.width();
      }
      return pos;
    };
    currentPositionRelativeToElement = function(event) {
      return coordinates(event).x - parent.offset().left;
    };
    handle.on(eventName('start'), function(downEvent) {
      var complete, downCoords, drag, handleStartX, hasDragged, max, min, percentOfXVal, startTime;
      if (isDragging || !opts.shouldDrag()) {
        return;
      }
      downEvent.preventDefault();
      if (opts.stopPropagation) {
        downEvent.stopPropagation();
      }
      min = typeof offsetMin === 'function' ? offsetMin() : offsetMin;
      max = typeof offsetMax === 'function' ? offsetMax() : offsetMax;
      percentOfXVal = function(x) {
        return (x - min) / (max - min);
      };
      handleStartX = currentPosition();
      startTime = Date.now();
      hasDragged = false;
      isDragging = true;
      downCoords = coordinates(downEvent);
      drag = function(dragEvent) {
        var currentX, dragCoords, isUnderPositionThreshold, isUnderTimeThreshold, offsetX, position, potentialX, relativePosition;
        dragCoords = coordinates(dragEvent);
        offsetX = dragCoords.x - downCoords.x;
        if (!hasDragged) {
          position = percentOfXVal(currentPosition());
          relativePosition = currentPositionRelativeToElement(dragEvent);
          isUnderPositionThreshold = Math.abs(offsetX) < opts.movementThreshold;
          isUnderTimeThreshold = Date.now() - startTime < opts.timeThreshold;
          if ((opts.requireBothThresholds && (isUnderTimeThreshold || isUnderPositionThreshold)) || (!opts.requireBothThresholds && isUnderTimeThreshold && isUnderPositionThreshold)) {
            return;
          }
          emitter.emit('dragStart', position, relativePosition);
          hasDragged = true;
        }
        currentX = currentPosition();
        potentialX = handleStartX + offsetX;
        if (min > potentialX) {
          if (currentX === min) {
            return;
          }
          potentialX = min;
        } else if (max < potentialX) {
          if (currentX === max) {
            return;
          }
          potentialX = max;
        }
        position = percentOfXVal(potentialX);
        relativePosition = currentPositionRelativeToElement(dragEvent);
        return emitter.emit('drag', position, relativePosition);
      };
      complete = function(event) {
        var position, relativePosition;
        isDragging = false;
        page.off(eventName('move'), drag);
        page.off(eventName('finish'), complete);
        if (hasDragged) {
          position = percentOfXVal(currentPosition());
          relativePosition = currentPositionRelativeToElement(event);
          return emitter.emit('dragFinish', position, relativePosition);
        } else if (Date.now() - startTime < 500) {
          return emitter.emit('click');
        }
      };
      page.on(eventName('move'), drag);
      return page.on(eventName('finish'), complete);
    });
    return emitter;
  };

}).call(this);
